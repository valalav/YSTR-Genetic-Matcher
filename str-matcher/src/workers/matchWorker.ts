import { STRProfile, MarkerCount, markerGroups } from '../utils/constants';
import { calculateGeneticDistance, CalculationMode } from '../utils/calculations';

declare const self: Worker & typeof globalThis;

// ‚ö° –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: Worker –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –º–∞—Å—Å–∏–≤!
interface OptimizedWorkerMessage {
  type: 'init' | 'processBatch' | 'finalize';
  query?: STRProfile;
  batch?: STRProfile[];
  markerCount?: MarkerCount;
  maxDistance?: number;
  maxMatches?: number;
  calculationMode?: CalculationMode;
  totalProfiles?: number;
  batchIndex?: number;
}

interface WorkerResult {
  profile: STRProfile;
  distance: number;
  comparedMarkers: number;
  identicalMarkers: number;
  percentIdentical: number;
  hasAllRequiredMarkers: boolean;
}

type OptimizedWorkerResponse = {
  type: 'complete';
  data: WorkerResult[];
} | {
  type: 'progress';
  progress: number;
  processed: number;
  found: number;
} | {
  type: 'batchComplete';
  results: WorkerResult[];
  processed: number;
} | {
  type: 'error';
  error: string;
};

// ‚ö° –°–û–°–¢–û–Ø–ù–ò–ï WORKER'–∞ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let globalQuery: STRProfile | null = null;
let globalParams: {
  markerCount: MarkerCount;
  maxDistance: number;
  maxMatches: number;
  calculationMode: CalculationMode;
  totalProfiles: number;
} | null = null;

let accumulatedResults: WorkerResult[] = [];
let processedCount = 0;
// ‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
function quickFilter(profile: STRProfile, query: STRProfile, markerCount: MarkerCount): boolean {
  // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º –ø—Ä–æ—Ñ–∏–ª—å
  if (profile.kitNumber === query.kitNumber) return false;

  const markersToCompare = markerGroups[markerCount];
  const minRequired = {
    12: 10,  // –º–∏–Ω–∏–º—É–º 10 –∏–∑ 11 –º–∞—Ä–∫–µ—Ä–æ–≤ (91%)
    37: 28,  // –º–∏–Ω–∏–º—É–º 28 –∏–∑ 30 –º–∞—Ä–∫–µ—Ä–æ–≤ (93%)  
    67: 55,  // –º–∏–Ω–∏–º—É–º 55 –∏–∑ 58 –º–∞—Ä–∫–µ—Ä–æ–≤ (95%)
    111: 97  // –º–∏–Ω–∏–º—É–º 97 –∏–∑ 102 –º–∞—Ä–∫–µ—Ä–æ–≤ (95%)
  }[markerCount];

  // ‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
  let validCount = 0;
  for (const marker of markersToCompare) {
    const value = profile.markers[marker]?.trim();
    if (value && value.length > 0) {
      validCount++;
      // ‚ö° –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
      if (validCount >= minRequired) return true;
    }
  }

  return false;
}

// ‚ö° –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ë–ê–¢–ß–ê —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function processBatch(
  batch: STRProfile[], 
  batchIndex: number
): Promise<WorkerResult[]> {
  if (!globalQuery || !globalParams) {
    throw new Error('Worker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  const { markerCount, maxDistance, calculationMode } = globalParams;
  const batchResults: WorkerResult[] = [];

  // ‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –±–∞—Ç—á–µ —Å –º–∏–∫—Ä–æ-–ø–∞—É–∑–∞–º–∏
  for (let i = 0; i < batch.length; i++) {
    const profile = batch[i];
    
    // ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (!quickFilter(profile, globalQuery, markerCount)) {
      continue;
    } else {
      processedCount++;
    }

    // ‚ö° –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    const result = calculateGeneticDistance(
      globalQuery.markers,
      profile.markers,
      markerCount,
      calculationMode
    );

    if (result.hasAllRequiredMarkers && result.distance <= maxDistance) {
      batchResults.push({
        profile,
        ...result
      });
    }

    processedCount++;

    // ‚ö° –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 100 –ø—Ä–æ—Ñ–∏–ª–µ–π —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Worker
    if (i % 100 === 0 && i > 0) {
      await new Promise(resolve => setTimeout(resolve, 1));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      self.postMessage({
        type: 'progress',
        progress: Math.floor((processedCount / globalParams.totalProfiles) * 100),
        processed: processedCount,
        found: accumulatedResults.length + batchResults.length
      });
    }
  }

  return batchResults;
}
// ‚ö° –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
self.onmessage = async function(e: MessageEvent<OptimizedWorkerMessage>) {
  try {
    const message = e.data;

    switch (message.type) {
      case 'init':
        // ‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Worker'–∞ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!message.query || !message.markerCount || message.maxDistance === undefined || 
            !message.maxMatches || !message.calculationMode || !message.totalProfiles) {
          throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        }

        globalQuery = message.query;
        globalParams = {
          markerCount: message.markerCount,
          maxDistance: message.maxDistance,
          maxMatches: message.maxMatches,
          calculationMode: message.calculationMode,
          totalProfiles: message.totalProfiles
        };
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        accumulatedResults = [];
        processedCount = 0;

        console.log(`üöÄ Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${message.totalProfiles} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
        
        self.postMessage({
          type: 'progress',
          progress: 0,
          processed: 0,
          found: 0
        });
        break;

      case 'processBatch':
        // ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if (!message.batch || message.batchIndex === undefined) {
          throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        }

        const batchResults = await processBatch(message.batch, message.batchIndex);
        
        // ‚ö° –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –æ–±—â–µ–º—É –º–∞—Å—Å–∏–≤—É
        accumulatedResults.push(...batchResults);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
        self.postMessage({
          type: 'batchComplete',
          results: batchResults,
          processed: processedCount
        });
        break;

      case 'finalize':
        // ‚ö° –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (!globalParams) {
          throw new Error('Worker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // ‚ö° –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const finalResults = accumulatedResults
          .sort((a, b) => a.distance - b.distance)
          .slice(0, globalParams.maxMatches);

        console.log(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ ${finalResults.length} –º–∞—Ç—á–µ–π –∏–∑ ${processedCount} –ø—Ä–æ—Ñ–∏–ª–µ–π`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.postMessage({
          type: 'complete',
          data: finalResults
        });

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        globalQuery = null;
        globalParams = null;
        accumulatedResults = [];
        processedCount = 0;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        if (typeof global !== 'undefined' && global.gc) {
          global.gc();
        }
        break;

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${(message as any).type}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Worker:', error);
    self.postMessage({
      type: 'error',
      error: error instanceof Error ? error.message : 'Unknown error in worker'
    });
  }
};