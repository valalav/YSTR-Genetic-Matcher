"use client";

import React, { useEffect, useState, useMemo, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Collapsible } from '@/components/ui/collapsible';
import { AppHeader } from '@/components/layout/AppHeader';
import STRMarkerGrid from './STRMarkerGrid';
import MatchesTable from './MatchesTable';
import DataRepositories from './DataRepositories';
import { useTranslation } from '@/hooks/useTranslation';
import DatabaseInput from './DatabaseInput';
import { useSTRMatcher } from '@/hooks/useSTRMatcher';
import { markerOperations } from '@/utils/markerOperations';
import { SearchSettings } from './SearchSettings';
import type { STRMatch, STRProfile } from '@/utils/constants';
import type { HaplogroupFilterState } from '@/types/haplogroup';
import { useHaplogroups } from '@/hooks/useHaplogroups';
import { HaplogroupFilter } from './HaplogroupFilter';
import debounce from 'lodash/debounce';
import { Checkbox } from '@/components/ui/checkbox';
import AadnaKitList from './AadnaKitList';
import type { MarkerCount } from '@/utils/constants';
import { Match, Filters } from '../../types';
import { processMatches } from '../../utils/calculations';
import type { CalculationMode } from '@/utils/calculations';
import { calculateGeneticDistance } from '@/utils/calculations';
import { markers } from '@/utils/constants';

interface STRMatcherState {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
  haplogroupFilter: HaplogroupFilterState;
}

const API_URL = process.env.NEXT_PUBLIC_API_URL || '/api';

const STRMatcher: React.FC = () => {
  const { t } = useTranslation();
  
  // üîÑ –£–ü–†–û–©–ï–ù–ù–´–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ useSTRMatcher
  const {
    database, // üîÑ –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ –ø–∞–º—è—Ç–∏
    totalProfiles, // üîÑ –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∏–∑ database.length
    processingProgress, // ‚ö° –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processedCount, // ‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    foundCount, // ‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
    currentBatch, // ‚ö° –¢–µ–∫—É—â–∏–π batch
    totalBatches, // ‚ö° –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ batch'–µ–π
    setDatabase,
    mergeDatabase, // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    query,
    setQuery,
    matches: strMatches, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    setMatches: setStrMatches, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    loading,
    setLoading, // –¥–æ–±–∞–≤–ª—è–µ–º setLoading –∏–∑ —Ö—É–∫–∞
    kitNumber,
    setKitNumber,
    searchHistory,
    setSearchHistory,
    error,
    setError,
    markerCount,
    setMarkerCount,
    maxDistance,
    setMaxDistance,
    maxMatches,
    setMaxMatches,
    markerSortOrder,
    setMarkerSortOrder,
    handleFindMatches,
    calculationMode,
    setCalculationMode
  } = useSTRMatcher();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è kitNumber
  useEffect(() => {
    if (!kitNumber) {
      setKitNumber('39626');
    }
  }, [kitNumber, setKitNumber]);

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø
  const [haplogroupFilteredMatches, setHaplogroupFilteredMatches] = useState<STRMatch[]>([]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
  const [hiddenMarkers, setHiddenMarkers] = useState<Set<string>>(new Set());

  const {
    filterHaplogroup,
    setFilterHaplogroup,
    includeSubclades,
    setIncludeSubclades,
    showEmptyHaplogroups,
    setShowEmptyHaplogroups,
    checkHaplogroupMatch
  } = useHaplogroups();

  // –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  const [isFilterActive, setIsFilterActive] = useState(false);

  // üîÑ –£–ü–†–û–©–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç CSV —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é

  // üîÑ –£–ü–†–û–©–ï–ù–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  const handleRemoveMatch = useCallback(async (matchKitNumber: string) => {
    try {
      // üîÑ –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏ –∏ –∏–∑ –º–∞—Ç—á–µ–π
      setDatabase(prev => prev.filter(p => p.kitNumber !== matchKitNumber));
      setStrMatches(prev => prev.filter(m => m.profile.kitNumber !== matchKitNumber));
      setHaplogroupFilteredMatches(prev => prev.filter(m => m.profile.kitNumber !== matchKitNumber));
      
      console.log(`üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å ${matchKitNumber} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
  }, [setDatabase, setStrMatches, setHaplogroupFilteredMatches]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleRemoveMarker
  const handleRemoveMarker = useCallback((marker: string) => {
    if (query) {
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö
      setHiddenMarkers(prev => new Set([...prev, marker]));
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –±–µ–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
      const { updatedQuery, updatedDatabase } = markerOperations.hideMarker(query, marker, database);
      if (updatedQuery) {
        setQuery(updatedQuery);
        setDatabase(updatedDatabase);
        
        // –ó–∞–Ω–æ–≤–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Å –Ω–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º –º–∞—Ä–∫–µ—Ä–æ–≤
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ì–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        setStrMatches(strMatches.map(match => {
          const result = calculateGeneticDistance(
            updatedQuery.markers,
            match.profile.markers,
            markerCount,
            calculationMode
          );

          return {
            ...match,
            ...result
          };
        })
        // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
        .filter(match => match.distance <= maxDistance)
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ì–î
        .sort((a, b) => a.distance - b.distance)
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        .slice(0, maxMatches));
      }
    }
  }, [
    query,
    database,
    setQuery,
    setDatabase,
    strMatches,
    setStrMatches,
    markerCount,
    calculationMode,
    maxDistance,
    maxMatches
  ]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é populateFromKitNumber
  // üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è populateFromKitNumber
  const populateFromKitNumber = useCallback(async (selectedKitNumber: string) => {
    if (!selectedKitNumber || !totalProfiles) return;

    try {
      // üîÑ –£–ü–†–û–©–ï–ù–ò–ï: –∏—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–∞—Å—Å–∏–≤–µ, –∞ –Ω–µ –≤ IndexedDB
      const selectedProfile = database.find(profile => profile.kitNumber === selectedKitNumber);
      if (!selectedProfile) {
        console.warn(`–ü—Ä–æ—Ñ–∏–ª—å ${selectedKitNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
        return;
      }

      setKitNumber(selectedKitNumber);
      
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
      setHiddenMarkers(new Set());
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
      const fullProfile = {
        ...selectedProfile,
        markers: { ...selectedProfile.markers }
      };
      
      setQuery(fullProfile);

      if (!searchHistory.some(item => item.kitNumber === selectedKitNumber)) {
        setSearchHistory(prev => [{
          kitNumber: selectedProfile.kitNumber,
          name: selectedProfile.name,
          haplogroup: selectedProfile.haplogroup,
          markers: selectedProfile.markers,
        timestamp: new Date()
      }, ...prev].slice(0, 10));
    }

    setTimeout(() => {
      handleFindMatches();
    }, 100);
    
    markerOperations.populateMarkerInputs(fullProfile);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞');
    }
  }, [database, searchHistory, setKitNumber, setQuery, setSearchHistory, setError, handleFindMatches, totalProfiles]);

  // –°–±—Ä–æ—Å –º–∞—Ä–∫–µ—Ä–æ–≤
  const resetMarkers = () => {
    markerOperations.resetMarkers();
    setQuery(null);
    setStrMatches([]);
    setKitNumber('');
  };

  // ‚ö° –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π handleFindMatches
  const handleSearch = useCallback(async () => {
    if (!query || Object.keys(query.markers).length === 0) {
      setStrMatches([]); // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
      return;
    }

    // ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
    await handleFindMatches();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [query, handleFindMatches]);

  // –°–æ–∑–¥–∞–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const debouncedFindMatches = useMemo(
    () => debounce(() => {
      if (query && Object.keys(query.markers).length > 0) {
        handleFindMatches();
      }
    }, 300),
    [query, handleFindMatches]
  );

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–µ–±–∞—É–Ω—Å–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      debouncedFindMatches.cancel();
    };
  }, [debouncedFindMatches]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
  const handleMarkerChange = useCallback((marker: string, value: string) => {
    const updatedQuery = markerOperations.updateMarkerValue(query, marker, value);
    if (updatedQuery) {
      setQuery(updatedQuery);
      debouncedFindMatches(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    }
  }, [query, debouncedFindMatches, setQuery]);

  const handleReset = () => {
    resetMarkers();
    setMaxDistance(25);
    setMaxMatches(200);
    setMarkerCount(37);
    setMarkerSortOrder('mutation_rate');
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const handleClearDatabase = () => {
    setDatabase([]);
    setStrMatches([]);
    setError(null);
  };

  // üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø
  const handleApplyFilter = useCallback(async () => {
    if (!filterHaplogroup || !strMatches.length) {
      setIsFilterActive(false);
      setHaplogroupFilteredMatches(strMatches);
      return;
    }

    setIsFilterActive(true);
    setLoading(true);

    try {
      if (includeSubclades) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π batch API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–±–∫–ª–∞–¥–æ–≤
        const uniqueHaplogroups = Array.from(new Set(
          strMatches
            .map(match => match.profile?.haplogroup)
            .filter((haplogroup): haplogroup is string => Boolean(haplogroup))
        ));

        if (uniqueHaplogroups.length === 0) {
          setHaplogroupFilteredMatches(showEmptyHaplogroups ? strMatches : []);
          return;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è batch API
        const matchesForFilter: Match[] = strMatches.map(match => ({
          id: match.profile.kitNumber,
          name: match.profile.name || '',
          haplogroup: match.profile.haplogroup,
          markers: match.profile.markers,
          distance: match.distance,
          comparedMarkers: match.comparedMarkers,
          identicalMarkers: match.identicalMarkers,
          percentIdentical: match.percentIdentical
        }));

        const filters: Filters = {
          haplogroups: [filterHaplogroup],
          includeSubclades: true
        };

        const filtered = await processMatches(matchesForFilter, filters);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ STRMatch
        const filteredSTRMatches = strMatches.filter(match =>
          filtered.some(f => f.id === match.profile.kitNumber) ||
          (!match.profile.haplogroup && showEmptyHaplogroups)
        );
        
        setHaplogroupFilteredMatches(filteredSTRMatches);
      } else {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Å—É–±–∫–ª–∞–¥–æ–≤
        const filtered = strMatches.filter(match => {
          const haplogroup = match.profile?.haplogroup;
          if (!haplogroup) {
            return showEmptyHaplogroups;
          }
          return haplogroup === filterHaplogroup;
        });
        
        setHaplogroupFilteredMatches(filtered);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø:', error);
      setHaplogroupFilteredMatches(strMatches);
    } finally {
      setLoading(false);
    }
  }, [filterHaplogroup, includeSubclades, showEmptyHaplogroups, strMatches, setLoading]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
  const handleResetFilter = useCallback(() => {
    setFilterHaplogroup('');
    setIsFilterActive(false);
    setHaplogroupFilteredMatches(strMatches);
  }, [strMatches, setFilterHaplogroup, setIsFilterActive, setHaplogroupFilteredMatches]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –º–∞—Ç—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
  const displayedMatches = isFilterActive ? haplogroupFilteredMatches : strMatches;

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
  useEffect(() => {
    if (!isFilterActive) {
      setHaplogroupFilteredMatches(strMatches);
    }
  }, [strMatches, isFilterActive]);

  // üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  const handleKeepFilteredOnly = useCallback(async () => {
    if (!displayedMatches?.length || !query) return;

    try {
      setLoading(true);
      // –ü–æ–ª—É—á–∞–µ–º kit numbers –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
      const filteredKitNumbers = new Set(displayedMatches.map(match => match.profile.kitNumber));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π query –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö
      if (query.kitNumber) {
        filteredKitNumbers.add(query.kitNumber);
      }
      
      // üîÑ –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
      const filteredDatabase = database.filter(profile =>
        filteredKitNumbers.has(profile.kitNumber)
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
      setDatabase(filteredDatabase);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã –º–∞—Ç—á–µ–π
      setStrMatches(displayedMatches);
      setHaplogroupFilteredMatches(displayedMatches);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setFilterHaplogroup('');
      setIsFilterActive(false);
      
      console.log(`üîÑ –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${filteredDatabase.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π`);
    } catch (error) {
      console.error('Error keeping filtered profiles:', error);
      setError('Failed to update database with filtered profiles');
    } finally {
      setLoading(false);
    }
  }, [displayedMatches, database, query, setLoading, setError, setDatabase, setStrMatches,
      setHaplogroupFilteredMatches, setFilterHaplogroup, setIsFilterActive]);

  // üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  const handleRemoveFiltered = useCallback(async () => {
    if (!displayedMatches?.length) return;

    try {
      setLoading(true);
      // –ü–æ–ª—É—á–∞–µ–º kit numbers –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
      const filteredKitNumbers = new Set(displayedMatches.map(match => match.profile.kitNumber));
      
      // üîÑ –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ù–ï –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
      const remainingDatabase = database.filter(profile =>
        !filteredKitNumbers.has(profile.kitNumber)
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
      setDatabase(remainingDatabase);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã –º–∞—Ç—á–µ–π
      const remainingMatches = strMatches.filter(match =>
        !filteredKitNumbers.has(match.profile.kitNumber)
      );
      setStrMatches(remainingMatches);
      setHaplogroupFilteredMatches(remainingMatches);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      setFilterHaplogroup('');
      setIsFilterActive(false);
      
      console.log(`üîÑ –£–¥–∞–ª–µ–Ω–æ ${filteredKitNumbers.size} –ø—Ä–æ—Ñ–∏–ª–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å ${remainingDatabase.length}`);
    } catch (error) {
      console.error('Error removing filtered profiles:', error);
      setError('Failed to remove filtered profiles from database');
    } finally {
      setLoading(false);
    }
  }, [displayedMatches, database, strMatches, setLoading, setError, setDatabase, setStrMatches,
      setHaplogroupFilteredMatches, setFilterHaplogroup, setIsFilterActive]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV
  // üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const handleExportDatabase = useCallback(async () => {
    if (!totalProfiles) return;

    try {
      setLoading(true);
      
      // üîÑ –£–ü–†–û–©–ï–ù–ò–ï: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
      const exportData = database;

      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV
      const headers = ['kitNumber', 'name', 'country', 'haplogroup', ...markers];
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç
      const csvContent = [
        headers.join(','),
        ...exportData.map(profile => {
          const row = [
            profile.kitNumber,
            profile.name || '',
            profile.country || '',
            profile.haplogroup || '',
            ...markers.map(marker => profile.markers[marker] || '')
          ];
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏–ª–∏ –∫–∞–≤—ã—á–∫–∏
          return row.map(value => {
            if (value.includes(',') || value.includes('"')) {
              return `"${value.replace(/"/g, '""')}"`;
            }
            return value;
          }).join(',');
        })
      ].join('\n');

      // –°–æ–∑–¥–∞–µ–º Blob –∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      
      link.setAttribute('href', url);
      link.setAttribute('download', `str_database_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${exportData.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('Failed to export database');
    } finally {
      setLoading(false);
    }
  }, [database, totalProfiles, setLoading, setError]);

  return (
    <>
      <AppHeader />
      {error && (
        <div className="w-full max-w-[1600px] mx-auto px-4 py-2 mb-5">
          <div className="bg-red-100 border border-red-400 text-red-700 px-5 py-4 rounded-xl shadow-md">
            {error}
          </div>
        </div>
      )}
      
      <div className="w-full max-w-[1600px] mx-auto px-4">
        <div className="flex gap-8 mb-8">
          <div className="w-96 flex-shrink-0">
            <div className="space-y-6 sticky top-4">
              <Collapsible title={t('search.history')} defaultOpen={false}>
                <div className="space-y-2">
                  {searchHistory.map((item, index) => (
                    <div 
                      key={index}
                      className="flex items-center justify-between p-3 hover:bg-gray-100 rounded-lg cursor-pointer transition-colors shadow-sm hover:shadow-md border border-transparent hover:border-gray-200"
                      onClick={() => populateFromKitNumber(item.kitNumber)}
                    >
                      <div className="w-full">
                        <div className="font-medium text-primary">{item.kitNumber}</div>
                        <div className="text-sm text-gray-500 flex justify-between mt-1">
                          <span className="font-medium">{item.name || '-'}</span>
                          <span className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">{item.haplogroup || '-'}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                  {searchHistory.length === 0 && (
                    <div className="text-gray-500 text-sm p-2">
                      {t('search.noHistory')}
                    </div>
                  )}
                </div>
              </Collapsible>

              <AadnaKitList onKitNumberClick={populateFromKitNumber} />
            </div>
          </div>
          <div className="flex-1 min-w-0">
            <div className="space-y-4">
              <Collapsible title={t('database.sources')} defaultOpen={true}>
                <div className="space-y-4">
                  <div className="text-sm text-gray-600">
                    {t('database.loadedProfiles')}: {totalProfiles}
                  </div>
                  <DataRepositories
                    onLoadData={async () => {}}
                    mergeDatabase={mergeDatabase}
                    setDatabase={setDatabase}
                  />
                </div>
              </Collapsible>
              
              <Collapsible title={t('database.manualInput')} defaultOpen={false}>
                <DatabaseInput
                  onDataLoaded={mergeDatabase}
                  onError={setError}
                  recordCount={totalProfiles}
                />
              </Collapsible>

              <Collapsible title={t('settings.title')} defaultOpen={true}>
                <div className="space-y-4">
                  <SearchSettings
                    kitNumber={kitNumber}
                    setKitNumber={setKitNumber}
                    maxDistance={maxDistance}
                    setMaxDistance={setMaxDistance}
                    maxMatches={maxMatches}
                    setMaxMatches={setMaxMatches}
                    markerCount={markerCount as MarkerCount}
                    setMarkerCount={setMarkerCount as (value: MarkerCount) => void}
                    markerSortOrder={markerSortOrder as 'default' | 'mutation_rate'}
                    setMarkerSortOrder={setMarkerSortOrder as (value: 'default' | 'mutation_rate') => void}
                    calculationMode={calculationMode}
                    setCalculationMode={setCalculationMode}
                    onPopulateMarkers={() => {
                      const selectedProfile = database.find(profile => profile.kitNumber === kitNumber);
                      if (selectedProfile) {
                        setQuery(selectedProfile);
                        markerOperations.populateMarkerInputs(selectedProfile);
                      }
                    }}
                    onReset={handleReset}
                    onSearch={handleSearch}
                    onClearDatabase={handleClearDatabase}
                    onExportDatabase={handleExportDatabase}
                    loading={loading}
                    disabled={!kitNumber || totalProfiles === 0}
                    databaseSize={totalProfiles}
                  />
                  <HaplogroupFilter
                    id="haplogroup-filter"
                    filterHaplogroup={filterHaplogroup}
                    setFilterHaplogroup={setFilterHaplogroup}
                    includeSubclades={includeSubclades}
                    setIncludeSubclades={setIncludeSubclades}
                    showEmptyHaplogroups={showEmptyHaplogroups}
                    setShowEmptyHaplogroups={setShowEmptyHaplogroups}
                    onApplyFilter={handleApplyFilter}
                    onResetFilter={handleResetFilter}
                    onKeepFilteredOnly={handleKeepFilteredOnly}
                    onRemoveFiltered={handleRemoveFiltered}
                  />
                </div>
              </Collapsible>
            </div>
          </div>
        </div>

        <div className="mb-8">
          <Collapsible title={t('markers.title')} defaultOpen={false}>
            <div className="w-full overflow-x-auto">
              <div className="min-w-[1600px]">
                <STRMarkerGrid
                  initialMarkers={query?.markers || {}}
                  onMarkerChange={handleMarkerChange}
                />
              </div>
            </div>
          </Collapsible>
        </div>

        {(displayedMatches?.length > 0) && (
          <div className="w-full">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle>{t('matches.found', { count: displayedMatches.length })}</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <MatchesTable
                  matches={displayedMatches}
                  query={query}
                  onKitNumberClick={populateFromKitNumber}
                  onRemoveMatch={handleRemoveMatch}
                  onRemoveMarker={handleRemoveMarker}
                  sortOrder={markerSortOrder}
                  selectedMarkerCount={markerCount}
                  onFindMatches={handleSearch}
                  calculationMode={calculationMode}
                />
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </>
  );
};

export default STRMatcher;