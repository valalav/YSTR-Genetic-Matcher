import type { STRProfile } from '@/utils/constants';
import { markers } from '@/utils/constants';

export const parseCSVData = async (csvText: string): Promise<STRProfile[]> => {
  try {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
    const lines = csvText.trim().split(/\r?\n/).filter(line => line.trim());
    if (lines.length < 1) throw new Error('CSV file is empty or invalid');

    // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = lines[0].split(/\t|,/).map(h => h.trim().replace(/"/g, ''));
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV:', headers);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
    const kitNumberAliases = ['kit number', 'kit no', 'kit', 'id', 'number', 'kitnumber'];
    const kitIndex = headers.findIndex(h => kitNumberAliases.includes(h.toLowerCase()));
    console.log(`üîç –ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ kitNumber: ${kitIndex} (–∑–∞–≥–æ–ª–æ–≤–æ–∫: "${headers[kitIndex]}")`);

    if (kitIndex === -1) {
      console.warn('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ kitNumber –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    }
    const nameIndex = headers.findIndex(h => 
      h.toLowerCase() === 'name' || 
      h.toLowerCase().includes('paternal')
    );
    const countryIndex = headers.findIndex(h => 
      h.toLowerCase() === 'country' || 
      h.toLowerCase().includes('origin')
    );
    const haplogroupIndex = headers.findIndex(h => 
      h.toLowerCase().includes('haplo') || 
      h.toLowerCase() === 'subclade'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã ID/Kit –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
    const hasMarkers = headers.some(h => markers.includes(h));
    if (kitIndex === -1 && !hasMarkers) {
      throw new Error('No kit number column or markers found');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    const profiles: STRProfile[] = [];
    let profileCounter = 0;

    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(/\t|,/).map(v => v.trim());

      const actualKitNumber = kitIndex >= 0 ? values[kitIndex] : '';

      // üêõ –î–µ–±–∞–≥: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ—Ñ–∏–ª—è
      if (i <= 3) {
        console.log(`üìù –°—Ç—Ä–æ–∫–∞ ${i}:`, {
          kitIndex,
          actualKitNumber,
          'values[kitIndex]': values[kitIndex],
          firstFewValues: values.slice(0, 5)
        });
      }

      const profile: STRProfile = {
        kitNumber: actualKitNumber || `AUTO_${++profileCounter}`,
        markers: {}
      };

      if (nameIndex >= 0) profile.name = values[nameIndex];
      if (countryIndex >= 0) profile.country = values[countryIndex];
      if (haplogroupIndex >= 0) profile.haplogroup = values[haplogroupIndex];

      // –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
      headers.forEach((header, index) => {
        if (markers.includes(header) && values[index]) {
          profile.markers[header] = values[index];
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã
      if (Object.keys(profile.markers).length > 0) {
        profiles.push(profile);
      }
    }

    if (profiles.length === 0) {
      throw new Error('No valid profiles found in CSV');
    }

    return profiles;

  } catch (error) {
    console.error('Error parsing CSV:', error);
    throw error;
  }
};