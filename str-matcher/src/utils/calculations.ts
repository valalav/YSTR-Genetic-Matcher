import { markerGroups, palindromes } from './constants';
import type { STRMatch, MarkerCount } from './constants';
import type { Profile } from '@/types/profile';
import type { HaplogroupFilter } from '@/types/haplogroup';
import axios from 'axios';
import { Match, Filters } from '../types';

export interface CalculationMode {
  type: 'standard' | 'extended';
}

// ‚ö° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø
const haplogroupCache = new Map<string, boolean>();
const CACHE_EXPIRY = 60 * 60 * 1000; // 1 —á–∞—Å
const cacheTimestamps = new Map<string, number>();

// ‚ö° –ú–ï–ú–û–ò–ó–ê–¶–ò–Ø: –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–¥–∫–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
const rarityCache = new Map<string, { rarity: number; rarityStyle?: React.CSSProperties; timestamp: number }>();
const RARITY_CACHE_EXPIRY = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

export function normalizeMarkerValue(value: string | number): number {
  if (typeof value === 'undefined' || value === null || value === '') return NaN;
  return parseInt(String(value).trim());
}

export function calculateMarkerDifference(
  value1: string,
  value2: string,
  marker: string,
  isPalindrome?: boolean,
  mode: CalculationMode = { type: 'standard' }
): number {
  if (!value1 || !value2) return 0;

  if (!isPalindrome) {
    const val1 = normalizeMarkerValue(value1);
    const val2 = normalizeMarkerValue(value2);
    if (isNaN(val1) || isNaN(val2)) return 0;

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ 2
    return mode.type === 'standard' ? 
      Math.min(Math.abs(val2 - val1), 2) : 
      Math.abs(val2 - val1);
  }

  // –î–ª—è –ø–æ–ª–∏–Ω–¥—Ä–æ–º–æ–≤
  const vals1 = value1.split(/[-,]/).map(Number);
  const vals2 = value2.split(/[-,]/).map(Number);
  
  if (vals1.length !== vals2.length) return 0;

  let totalDiff = 0;
  
  // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
  for (let i = 0; i < vals1.length; i++) {
    if (isNaN(vals1[i]) || isNaN(vals2[i])) return 0;
    const diff = Math.abs(vals2[i] - vals1[i]);
    totalDiff += mode.type === 'standard' ? Math.min(diff, 2) : diff;
  }
  
  // –î–ª—è –ø–æ–ª–∏–Ω–¥—Ä–æ–º–∞ –æ–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ 2!
  return mode.type === 'standard' ? Math.min(totalDiff, 2) : totalDiff;
}
export interface GeneticDistanceResult {
  distance: number;
  comparedMarkers: number;
  identicalMarkers: number;
  percentIdentical: number;
  hasAllRequiredMarkers: boolean;
}

export function calculateGeneticDistance(
  profile1: Record<string, string>,
  profile2: Record<string, string>, 
  selectedMarkerCount: MarkerCount,
  mode: CalculationMode = { type: 'standard' }
): GeneticDistanceResult {
  // Get markers based on selected count
  const markersToCompare = typeof selectedMarkerCount === 'string' && selectedMarkerCount === 'GP' 
    ? markerGroups.GP 
    : markerGroups[selectedMarkerCount];
  
  const activeMarkers = markersToCompare.filter(marker => 
    marker in profile1 && profile1[marker]?.trim()
  );

  const minRequired = Math.ceil(activeMarkers.length * 0.8);
  
  let totalDistance = 0;
  let comparedCount = 0;
  let identicalCount = 0;

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–∏–Ω–¥—Ä–æ–º–æ–≤
  const palindromeValues: Record<string, { values1: string, values2: string }> = {};
  
  for (const marker of activeMarkers) {
    const value1 = profile1[marker]?.trim();
    const value2 = profile2[marker]?.trim();

    if (!value1 || !value2) continue;

    comparedCount++;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –º–∞—Ä–∫–µ—Ä–∞
    const baseMarker = marker.replace(/[ab]$/, '');
    const isPalindrome = baseMarker in palindromes;

    if (isPalindrome) {
      // –î–ª—è –ø–æ–ª–∏–Ω–¥—Ä–æ–º–æ–≤ —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
      if (!palindromeValues[baseMarker]) {
        palindromeValues[baseMarker] = { values1: value1, values2: value2 };
      } else {
        palindromeValues[baseMarker].values1 += `-${value1}`;
        palindromeValues[baseMarker].values2 += `-${value2}`;
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å—Ä–∞–∑—É
      const diff = calculateMarkerDifference(value1, value2, marker, false, mode);
      if (!isNaN(diff)) {
        totalDistance += diff;
        if (diff === 0) {
          identicalCount++;
        }
      }
    }
  }

  // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–∏–Ω–¥—Ä–æ–º—ã
  for (const [baseMarker, { values1, values2 }] of Object.entries(palindromeValues)) {
    const diff = calculateMarkerDifference(values1, values2, baseMarker, true, mode);
    if (!isNaN(diff)) {
      totalDistance += diff;
      if (diff === 0) {
        identicalCount++;
      }
    }
  }

  if (comparedCount < minRequired) {
    return {
      distance: 0,
      comparedMarkers: comparedCount,
      identicalMarkers: identicalCount,
      percentIdentical: 0,
      hasAllRequiredMarkers: false
    };
  }

  return {
    distance: totalDistance,
    comparedMarkers: comparedCount,
    identicalMarkers: identicalCount,
    percentIdentical: (identicalCount / comparedCount) * 100,
    hasAllRequiredMarkers: true
  };
}
export interface MarkerRarityResult {
  rarity: number;
  rarityStyle?: React.CSSProperties;
}

// ‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–¥–∫–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
export function calculateMarkerRarity(
  matches: STRMatch[],
  marker: string,
  value: string,
  queryValue: string
): MarkerRarityResult {
  // Skip calculation if values don't match
  if (value !== queryValue) {
    return { rarity: 0, rarityStyle: undefined };
  }

  const totalProfiles = matches.length;
  if (totalProfiles < 5) return { rarity: 0, rarityStyle: undefined };

  // ‚ö° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const cacheKey = `${marker}_${value}_${totalProfiles}`;
  const cached = rarityCache.get(cacheKey);
  if (cached && (Date.now() - cached.timestamp) < RARITY_CACHE_EXPIRY) {
    return { rarity: cached.rarity, rarityStyle: cached.rarityStyle };
  }

  // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç —Å —Ä–∞–Ω–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º
  let matchingCount = 0;
  for (const match of matches) {
    if (match.profile.markers[marker] === value) {
      matchingCount++;
    }
  }

  const percentage = (matchingCount / totalProfiles) * 100;

  // Set background color based on rarity
  let backgroundColor;
  let rarityStyle: React.CSSProperties | undefined;
  
  if (percentage <= 4) backgroundColor = 'var(--rarity-1)';
  else if (percentage <= 8) backgroundColor = 'var(--rarity-2)';
  else if (percentage <= 12) backgroundColor = 'var(--rarity-3)';
  else if (percentage <= 20) backgroundColor = 'var(--rarity-4)';
  else if (percentage <= 33) backgroundColor = 'var(--rarity-5)';
  else {
    // ‚ö° –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å—Ç–∏–ª—è
    const result = { rarity: percentage, rarityStyle: undefined };
    rarityCache.set(cacheKey, { ...result, timestamp: Date.now() });
    return result;
  }

  rarityStyle = {
    backgroundColor,
    color: backgroundColor === 'var(--rarity-5)' ? 'var(--text-primary)' : 'white',
    width: '100%',
    height: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  };

  // ‚ö° –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = { rarity: percentage, rarityStyle };
  rarityCache.set(cacheKey, { ...result, timestamp: Date.now() });
  
  return result;
}

export const calculateDistance = (
  markers1: Record<string, string>,
  markers2: Record<string, string>
): number => {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  return 0;
};
export const findMatches = (
  query: Profile,
  database: Profile[],
  options: {
    maxDistance: number,
    markerCount: MarkerCount,
    haplogroupFilter?: HaplogroupFilter
  }
) => {
  let matches = database.filter(profile => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤
    const geneticResult = calculateGeneticDistance(query.markers, profile.markers, options.markerCount);
    
    // –ï—Å–ª–∏ —É –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (!geneticResult.hasAllRequiredMarkers) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    if (geneticResult.distance > options.maxDistance) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø–∞–º
    if (options.haplogroupFilter) {
      const { includeGroups, excludeGroups, includeSubclades } = options.haplogroupFilter;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
      if (excludeGroups.some((group: string) => 
        isHaplogroupMatch(profile.haplogroup || '', group, includeSubclades)
      )) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏—è
      if (includeGroups.length && !includeGroups.some((group: string) =>
        isHaplogroupMatch(profile.haplogroup || '', group, includeSubclades)
      )) {
        return false;
      }
    }
    
    return true;
  });
  
  return matches;
};

const isHaplogroupMatch = (
  profileHaplogroup: string,
  filterHaplogroup: string,
  includeSubclades: boolean
): boolean => {
  if (!includeSubclades) {
    return profileHaplogroup === filterHaplogroup;
  }
  
  return profileHaplogroup.startsWith(filterHaplogroup);
};
// ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Batch API –≤—ã–∑–æ–≤—ã –≤–º–µ—Å—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
export async function processMatches(matches: Match[], filters: Filters): Promise<Match[]> {
    if (filters.haplogroups.length === 0) return matches;

    console.log(`üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${matches.length} –º–∞—Ç—á–µ–π –¥–ª—è ${filters.haplogroups.length} –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø`);

    // ‚ö° –ì–†–£–ü–ü–ò–†–£–ï–ú –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø–∞–º –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const uniqueHaplogroups = new Set<string>();
    const matchesWithHaplogroups = matches.filter(match => {
        if (!match.haplogroup) return false;
        uniqueHaplogroups.add(match.haplogroup);
        return true;
    });

    if (uniqueHaplogroups.size === 0) return [];

    // ‚ö° BATCH API –í–´–ó–û–í: –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Ç—ã—Å—è—á!
    try {
        const batchPayload = {
            haplogroups: Array.from(uniqueHaplogroups),
            parentHaplogroups: filters.haplogroups
        };

        console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å –¥–ª—è ${uniqueHaplogroups.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å. Next.js –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É –≤ next.config.js
        const response = await axios.post<{ results: Record<string, boolean> }>(`/api/batch-check-subclades`, batchPayload);
        
        const results = response.data.results;

        // ‚ö° –§–ò–õ–¨–¢–†–£–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è batch –æ—Ç–≤–µ—Ç
        const filteredMatches = matchesWithHaplogroups.filter(match => {
            if (!match.haplogroup) return false;
            
            // ‚ö° –ö–≠–®–ò–†–£–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            const cacheKey = `${match.haplogroup}_${filters.haplogroups.join('|')}`;
            const isIncluded = results[match.haplogroup];
            
            if (isIncluded !== undefined) {
                haplogroupCache.set(cacheKey, isIncluded);
                cacheTimestamps.set(cacheKey, Date.now());
                return isIncluded;
            }
            
            return false;
        });

        console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredMatches.length} –∏–∑ ${matches.length} –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ batch API`);
        return filteredMatches;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ batch API, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥:', error);
        
        // ‚ö° –†–ï–ó–ï–†–í–ù–´–ô –ú–ï–¢–û–î: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        return await processMatchesWithCache(matchesWithHaplogroups, filters);
    }
}

// ‚ö° –†–ï–ó–ï–†–í–ù–´–ô –ú–ï–¢–û–î: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function processMatchesWithCache(matches: Match[], filters: Filters): Promise<Match[]> {
    const filteredMatches: Match[] = [];
    let cacheHits = 0;
    let apiCalls = 0;

    for (const match of matches) {
        if (!match.haplogroup) continue;

        let include = false;
        
        for (const filterHaplo of filters.haplogroups) {
            const cacheKey = `${match.haplogroup}_${filterHaplo}`;
            
            // ‚ö° –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®
            const cached = haplogroupCache.get(cacheKey);
            const timestamp = cacheTimestamps.get(cacheKey);
            
            if (cached !== undefined && timestamp && (Date.now() - timestamp) < CACHE_EXPIRY) {
                cacheHits++;
                if (cached) {
                    include = true;
                    break;
                }
                continue;
            }

            // ‚ö° –î–ï–õ–ê–ï–ú API –ó–ê–ü–†–û–° —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
            try {
                apiCalls++;
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å - Next.js –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∫ API —Å–µ—Ä–≤–µ—Ä—É
                const response = await axios.post<{ isSubclade: boolean }>(`/api/check-subclade`, {
                    haplogroup: match.haplogroup,
                    parentHaplogroup: filterHaplo
                });
                
                const result = response.data.isSubclade;
                
                // ‚ö° –ö–≠–®–ò–†–£–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                haplogroupCache.set(cacheKey, result);
                cacheTimestamps.set(cacheKey, Date.now());
                
                if (result) {
                    include = true;
                    break;
                }
            } catch (error) {
                console.error('Error checking subclade:', error);
            }
        }
        
        if (include) {
            filteredMatches.push(match);
        }
    }

    console.log(`üìä –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${cacheHits} cache hits, ${apiCalls} API calls`);
    return filteredMatches;
}

// ‚ö° –°–õ–£–ñ–ï–ë–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
export function clearHaplogroupCache(): void {
    haplogroupCache.clear();
    cacheTimestamps.clear();
    rarityCache.clear();
    console.log('üóëÔ∏è –ö—ç—à –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω');
}