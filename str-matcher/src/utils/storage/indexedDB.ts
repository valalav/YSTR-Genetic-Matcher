import { STRProfile } from '@/utils/constants';

const DB_NAME = 'str_matcher_db';
const DB_VERSION = 2; // ‚ö° –£–≤–µ–ª–∏—á–∏–≤–∞—é –≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤

export class DatabaseManager {
  private db: IDBDatabase | null = null;
  private static instance: DatabaseManager | null = null;

  private constructor() {}

  static getInstance(): DatabaseManager {
    if (!DatabaseManager.instance) {
      DatabaseManager.instance = new DatabaseManager();
    }
    return DatabaseManager.instance;
  }

  async init(): Promise<void> {
    if (this.db) return;
  
    return new Promise<void>((resolve, reject) => {
      const request = indexedDB.open(DB_NAME, DB_VERSION);
  
      request.onerror = () => reject(new Error('Failed to open database'));
  
      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {
        const db = (event.target as IDBOpenDBRequest).result;
        
        if (db.objectStoreNames.contains('profiles')) {
          db.deleteObjectStore('profiles');
        }
  
        // ‚ö° –°–æ–∑–¥–∞–µ–º store —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        const store = db.createObjectStore('profiles', { keyPath: 'kitNumber' });
        
        // ‚ö° –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        store.createIndex('orderIndex', 'orderIndex', { unique: false });
        store.createIndex('haplogroup', 'haplogroup', { unique: false });
        store.createIndex('ancestralOrigin', 'ancestralOrigin', { unique: false });
        
        // ‚ö° –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        store.createIndex('haplogroup_origin', ['haplogroup', 'ancestralOrigin'], { unique: false });
        
        // ‚ö° –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
        console.log('üîß –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      };
  
      request.onsuccess = async () => {
        this.db = request.result;
        // ‚úÖ –ù–ï –æ—á–∏—â–∞–µ–º –±–∞–∑—É! –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
        console.log('‚úÖ –ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        resolve();
      };
    });
  }
  // ‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï: Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö put()
  async saveProfiles(profiles: STRProfile[]): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');
    
    const BATCH_SIZE = 1000; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 1000
    
    console.log(`üöÄ –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
    
    for (let i = 0; i < profiles.length; i += BATCH_SIZE) {
      const batch = profiles.slice(i, i + BATCH_SIZE);
      
      await new Promise<void>((resolve, reject) => {
        const tx = this.db!.transaction('profiles', 'readwrite');
        const store = tx.objectStore('profiles');

        batch.forEach(profile => store.put(profile));

        tx.oncomplete = () => {
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(profiles.length/BATCH_SIZE)}`);
          resolve();
        };

        tx.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', tx.error);
          reject(tx.error);
        };
      });
      
      // ‚ö° –ü–∞—É–∑–∞ –º–µ–∂–¥—É batch'–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
      await new Promise(resolve => setTimeout(resolve, 10));
    }
    
    console.log(`üéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ`);
  }

  // üîÑ –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–µ–∑ –¥—É–±–ª–µ–π
  async mergeProfiles(newProfiles: STRProfile[]): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');
    
    console.log(`üîÑ –ù–∞—á–∞–ª–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${newProfiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
      const existingProfiles = await this.getProfiles().catch(() => []);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ (–¥—É–±–ª–∏ –ø–æ kitNumber –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –Ω–æ–≤—ã–º–∏)
      const profileMap = new Map<string, STRProfile>();
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
      existingProfiles.forEach(profile => {
        if (profile.kitNumber) {
          profileMap.set(profile.kitNumber, profile);
        }
      });
      
      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –¥—É–±–ª–∏)
      newProfiles.forEach(profile => {
        if (profile.kitNumber) {
          profileMap.set(profile.kitNumber, profile);
        }
      });
      
      const mergedProfiles = Array.from(profileMap.values());
      
      // –û—á–∏—â–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
      await this.clearProfiles();
      await this.saveProfiles(mergedProfiles);
      
      console.log(`üîÑ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${existingProfiles.length} + ${newProfiles.length} = ${mergedProfiles.length} (–∏—Å–∫–ª—é—á–µ–Ω–æ –¥—É–±–ª–µ–π: ${existingProfiles.length + newProfiles.length - mergedProfiles.length})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // ‚ö° –ü–û–¢–û–ö–û–í–û–ï –ß–¢–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ getAll() - —á–∏—Ç–∞–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ cursor
  async streamProfiles(
    callback: (profiles: STRProfile[]) => void,
    batchSize: number = 1000,
    filter?: (profile: STRProfile) => boolean
  ): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const tx = this.db!.transaction('profiles', 'readonly');
      const store = tx.objectStore('profiles');
      const request = store.openCursor();
      
      let batch: STRProfile[] = [];
      let totalProcessed = 0;

      request.onsuccess = (event) => {
        const cursor = (event.target as IDBRequest<IDBCursorWithValue>).result;
        
        if (cursor) {
          const profile = cursor.value as STRProfile;
          
          // ‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
          if (!filter || filter(profile)) {
            batch.push(profile);
          }
          
          // ‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
          if (batch.length >= batchSize) {
            callback(batch);
            totalProcessed += batch.length;
            batch = [];
          }
          
          cursor.continue();
        } else {
          // ‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π batch
          if (batch.length > 0) {
            callback(batch);
            totalProcessed += batch.length;
          }
          console.log(`üîÑ –ü–æ—Ç–æ–∫–æ–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
          resolve();
        }
      };

      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è:', request.error);
        reject(request.error);
      };
    });
  }
  // ‚ö° –ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ü–æ–¥—Å—á–µ—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  async getProfilesCount(): Promise<number> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const tx = this.db!.transaction('profiles', 'readonly');
      const store = tx.objectStore('profiles');
      const request = store.count();

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  // ‚ö° –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ kit number –±–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –±–∞–∑—ã  
  async getProfileByKitNumber(kitNumber: string): Promise<STRProfile | null> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const tx = this.db!.transaction('profiles', 'readonly');
      const store = tx.objectStore('profiles');
      const request = store.get(kitNumber);

      request.onsuccess = () => resolve(request.result || null);
      request.onerror = () => reject(request.error);
    });
  }

  // ‚ö° –ò–ù–î–ï–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –≥–∞–ø–ª–æ–≥—Ä—É–ø–ø–µ
  async getProfilesByHaplogroup(haplogroup: string): Promise<STRProfile[]> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const tx = this.db!.transaction('profiles', 'readonly');
      const store = tx.objectStore('profiles');
      const index = store.index('haplogroup');
      const request = index.getAll(haplogroup);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  // ‚ö° –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø: –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
  async hasProfiles(): Promise<boolean> {
    try {
      const count = await this.getProfilesCount();
      return count > 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
      return false;
    }
  }
  // ‚ö†Ô∏è –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ getProfiles (–¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞)
  // –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –î–õ–Ø –ú–ê–õ–´–• –ë–ê–ó (<10k –ø—Ä–æ—Ñ–∏–ª–µ–π)!
  async getProfiles(): Promise<STRProfile[]> {
    if (!this.db) throw new Error('Database not initialized');

    const count = await this.getProfilesCount();
    if (count > 10000) {
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Äuz–∏—Ç—å ${count} –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ getProfiles()! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ streamProfiles()`);
      throw new Error(`–ë–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (${count} –ø—Ä–æ—Ñ–∏–ª–µ–π). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ streamProfiles() –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.`);
    }

    return new Promise((resolve, reject) => {
      const tx = this.db!.transaction('profiles', 'readonly');
      const store = tx.objectStore('profiles');
      const request = store.getAll(); // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –º–∞–ª—ã—Ö –±–∞–∑

      request.onsuccess = () => {
        const profiles = request.result;
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –±–∞–∑—ã (–º–∞–ª–∞—è –±–∞–∑–∞)`);
        resolve(profiles);
      };

      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', request.error);
        reject(request.error);
      };
    });
  }

  // üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´: –¢–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
  async clearProfiles(): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const tx = this.db!.transaction('profiles', 'readwrite');
      const store = tx.objectStore('profiles');
      const request = store.clear();

      request.onsuccess = () => {
        console.log('üóëÔ∏è –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É');
        resolve();
      };

      request.onerror = () => reject(request.error);
    });
  }

  // üîß –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ
  async getDatabaseInfo(): Promise<{
    totalProfiles: number;
    dbVersion: number;
    hasData: boolean;
  }> {
    try {
      const totalProfiles = await this.getProfilesCount();
      return {
        totalProfiles,
        dbVersion: DB_VERSION,
        hasData: totalProfiles > 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ:', error);
      return {
        totalProfiles: 0,
        dbVersion: DB_VERSION,
        hasData: false
      };
    }
  }

  async deleteProfile(kitNumber: string): Promise<void> {
    if (!this.db) throw new Error("Database not initialized");
    
    const transaction = this.db.transaction(["profiles"], "readwrite");
    const store = transaction.objectStore("profiles");
    
    return new Promise((resolve, reject) => {
      const request = store.delete(kitNumber);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }
}


export const dbManager = DatabaseManager.getInstance();
