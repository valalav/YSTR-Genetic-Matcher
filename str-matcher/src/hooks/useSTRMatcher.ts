import { useState, useEffect, useCallback } from 'react';
import type { STRProfile, STRMatch, HistoryItem, MarkerCount } from '@/utils/constants';
import type { CalculationMode } from '@/utils/calculations';
import { useWorker } from '@/hooks/useWorker';
import { markerOperations } from '@/utils/markerOperations';

const CALCULATION_MODE_KEY = 'str_matcher_calculation_mode';

// üîÑ –£–¢–ò–õ–ò–¢–ê: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –¥—É–±–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç)
const mergeProfiles = (existingProfiles: STRProfile[], newProfiles: STRProfile[]): STRProfile[] => {
  const profileMap = new Map<string, STRProfile>();
  
  // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
  existingProfiles.forEach(profile => {
    if (profile.kitNumber) {
      profileMap.set(profile.kitNumber, profile);
    }
  });
  
  // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –¥—É–±–ª–∏ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç)
  newProfiles.forEach(profile => {
    if (profile.kitNumber) {
      profileMap.set(profile.kitNumber, profile);
    }
  });
  
  const mergedProfiles = Array.from(profileMap.values());
  console.log(`üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${existingProfiles.length} + ${newProfiles.length} = ${mergedProfiles.length} (–∏—Å–∫–ª—é—á–µ–Ω–æ –¥—É–±–ª–µ–π: ${existingProfiles.length + newProfiles.length - mergedProfiles.length})`);
  
  return mergedProfiles;
};

export const useSTRMatcher = () => {
  // üîÑ –£–ü–†–û–©–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –≤ –ø–∞–º—è—Ç–∏
  const [database, setDatabase] = useState<STRProfile[]>([]);
  
  const [query, setQuery] = useState<STRProfile | null>(null);
  const [matches, setMatches] = useState<STRMatch[]>([]);
  const [loading, setLoading] = useState(false);
  const [kitNumber, setKitNumber] = useState('');
  const [searchHistory, setSearchHistory] = useState<HistoryItem[]>([]);
  const [error, setError] = useState<string | null>(null);

  // ‚ö° –°–û–°–¢–û–Ø–ù–ò–Ø –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è UI)
  const [processingProgress, setProcessingProgress] = useState(0);
  const [processedCount, setProcessedCount] = useState(0);
  const [foundCount, setFoundCount] = useState(0);
  const [currentBatch, setCurrentBatch] = useState(0);
  const [totalBatches, setTotalBatches] = useState(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞
  const [markerCount, setMarkerCount] = useState<MarkerCount>(37);
  const [maxDistance, setMaxDistance] = useState(25);
  const [maxMatches, setMaxMatches] = useState(200);
  const [markerSortOrder, setMarkerSortOrder] = useState<'default' | 'mutation_rate'>('mutation_rate');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º calculationMode –∏–∑ localStorage
  const [calculationMode, setCalculationMode] = useState<CalculationMode>(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem(CALCULATION_MODE_KEY);
      return saved ? JSON.parse(saved) : { type: 'standard' };
    }
    return { type: 'standard' };
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem(CALCULATION_MODE_KEY, JSON.stringify(calculationMode));
  }, [calculationMode]);
  
  const { execute: executeMatching } = useWorker();

  // üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê: –†–∞–±–æ—Ç–∞–µ–º —Å –º–∞—Å—Å–∏–≤–æ–º –≤ –ø–∞–º—è—Ç–∏
  const handleFindMatches = useCallback(async () => {
    setLoading(true);
    setError(null);
    setProcessingProgress(0);
    setProcessedCount(0);
    setFoundCount(0);
    setCurrentBatch(0);
    
    try {
      if (!kitNumber) {
        setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
        return;
      }

      if (database.length === 0) {
        setError('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.');
        return;
      }
  
      // üîÑ –£–ü–†–û–©–ï–ù–ò–ï: –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–∞—Å—Å–∏–≤–µ, –∞ –Ω–µ –≤ IndexedDB
      const currentProfile = database.find(profile => profile.kitNumber === kitNumber);
      if (!currentProfile) {
        setError(`–ü—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º ${kitNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
        return;
      }

      setQuery(currentProfile);
      console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å ${kitNumber}, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ ${database.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
  
      // ‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞
      await initializeWorkerForSearch(currentProfile);
      
      // ‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
      await processProfilesInBatches();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      setError(error instanceof Error ? error.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [kitNumber, database, markerCount, maxDistance, maxMatches, calculationMode, executeMatching]);

  // ‚ö° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WORKER'–∞
  const initializeWorkerForSearch = async (queryProfile: STRProfile): Promise<void> => {
    try {
      await executeMatching({
        type: 'init',
        query: queryProfile,
        markerCount,
        maxDistance,
        maxMatches,
        calculationMode,
        totalProfiles: database.length
      });
      
      console.log('üöÄ Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞');
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Worker: ${error}`);
    }
  };

  // ‚ö° –û–ë–†–ê–ë–û–¢–ö–ê –ë–ê–¢–ß–ê–ú–ò: –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Worker
  const processProfilesInBatches = async (): Promise<void> => {
    const BATCH_SIZE = 1000; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 1000 –ø—Ä–æ—Ñ–∏–ª–µ–π
    const totalBatches = Math.ceil(database.length / BATCH_SIZE);
    setTotalBatches(totalBatches);

    return new Promise(async (resolve, reject) => {
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–∞—Ç—á
        for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
          const startIndex = batchIndex * BATCH_SIZE;
          const endIndex = Math.min(startIndex + BATCH_SIZE, database.length);
          const batch = database.slice(startIndex, endIndex);

          console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é batch ${batchIndex + 1}/${totalBatches} (${batch.length} –ø—Ä–æ—Ñ–∏–ª–µ–π)`);
          setCurrentBatch(batchIndex + 1);
          
          // ‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –≤ Worker
          const response = await executeMatching({
            type: 'processBatch',
            batch,
            batchIndex
          });

          // ‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç Worker'–∞
          if (response.type === 'batchComplete') {
            setProcessedCount(response.processed);
            console.log(`‚úÖ Batch ${batchIndex + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${response.results.length} –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π`);
          } else if (response.type === 'progress') {
            setProcessingProgress(response.progress);
            setProcessedCount(response.processed);
            setFoundCount(response.found);
          }
        }

        // ‚ö° –í—Å–µ –±–∞—Ç—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log(`üéØ –í—Å–µ ${totalBatches} –±–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`);
        
        const finalResponse = await executeMatching({ type: 'finalize' });
        
        if (finalResponse.type === 'complete') {
          setMatches(finalResponse.data);
          setProcessingProgress(100);
          console.log(`üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${finalResponse.data.length} –º–∞—Ç—á–µ–π`);
        }
        
        resolve();
      } catch (error) {
        reject(error);
      }
    });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleReset
  const handleReset = useCallback(() => {
    setMaxDistance(25);
    setMaxMatches(200);
    setMarkerCount(37);
    setMarkerSortOrder('mutation_rate');
    setCalculationMode({ type: 'standard' });
    setQuery(null);
    setMatches([]);
    setProcessingProgress(0);
    setProcessedCount(0);
    setFoundCount(0);
    setCurrentBatch(0);
    setTotalBatches(0);
    markerOperations.resetMarkers();
  }, []);

  // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –¥—É–±–ª–µ–π
  const mergeDatabase = useCallback((newProfiles: STRProfile[]) => {
    setDatabase(prevDatabase => {
      const merged = mergeProfiles(prevDatabase, newProfiles);
      console.log(`üîÑ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –±—ã–ª–æ ${prevDatabase.length}, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newProfiles.length}, —Å—Ç–∞–ª–æ ${merged.length}`);
      return merged;
    });
  }, []);

  return {
    // üîÑ –£–ü–†–û–©–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï
    database,
    setDatabase,
    mergeDatabase, // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    totalProfiles: database.length, // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    
    // ‚ö° –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê
    processingProgress,
    processedCount,
    foundCount,
    currentBatch,
    totalBatches,
    
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    query,
    setQuery,
    matches,
    setMatches,
    loading,
    setLoading,
    kitNumber,
    setKitNumber,
    searchHistory,
    setSearchHistory,
    error,
    setError,
    markerCount,
    setMarkerCount,
    maxDistance,
    setMaxDistance,
    maxMatches,
    setMaxMatches,
    markerSortOrder,
    setMarkerSortOrder,
    handleFindMatches, // ‚ö° –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    calculationMode,
    setCalculationMode,
    handleReset // ‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  };
};