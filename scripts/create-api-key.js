#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–µ–π
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/create-api-key.js
 *   node scripts/create-api-key.js --name "Team Key" --no-delete
 */

const readline = require('readline');

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:9004';
const MASTER_KEY = process.env.MASTER_API_KEY || 'master_dna_2025_ultra_secure_key_change_this_in_production';

// Parse command line arguments
const args = process.argv.slice(2);
let keyName = null;
let canDelete = true;

args.forEach((arg, index) => {
  if (arg === '--name' && args[index + 1]) {
    keyName = args[index + 1];
  } else if (arg === '--no-delete') {
    canDelete = false;
  }
});

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function createApiKey() {
  console.log('üîë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞\n');

  // Get key name
  if (!keyName) {
    keyName = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Research Team"): ');
  }

  if (!keyName.trim()) {
    console.log('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!');
    rl.close();
    return;
  }

  // Get description
  const description = await question('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ');

  // Get permissions
  console.log('\nüìã –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:');
  const canCreate = (await question('–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤? (y/n): ')).toLowerCase() === 'y';
  const canUpdate = (await question('–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤? (y/n): ')).toLowerCase() === 'y';

  if (!canDelete) {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤: –ù–ï–¢ (—É–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ --no-delete)');
  } else {
    canDelete = (await question('–†–∞–∑—Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤? (y/n): ')).toLowerCase() === 'y';
  }

  // Get expiration
  const expiresAnswer = await question('\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö? (Enter = –±–µ—Å—Å—Ä–æ—á–Ω—ã–π): ');
  const expiresInDays = expiresAnswer.trim() ? parseInt(expiresAnswer) : null;

  rl.close();

  // Create API key
  console.log('\n‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞...');

  const requestBody = {
    name: keyName.trim(),
    description: description.trim(),
    permissions: {
      'samples.create': canCreate,
      'samples.update': canUpdate,
      'samples.delete': canDelete
    }
  };

  if (expiresInDays) {
    requestBody.expiresInDays = expiresInDays;
  }

  try {
    const fetch = (await import('node-fetch')).default;

    const response = await fetch(`${BACKEND_URL}/api/admin/keys`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': MASTER_KEY
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || error.error || 'Failed to create key');
    }

    const data = await response.json();

    console.log('\n‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${data.keyInfo.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${data.keyInfo.description || '(–Ω–µ—Ç)'}`);
    console.log(`üîë API –ö–ª—é—á: ${data.apiKey}`);
    console.log(`üÜî ID: ${data.keyInfo.id}`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(data.keyInfo.createdAt).toLocaleString('ru-RU')}`);

    if (data.keyInfo.expiresAt) {
      console.log(`‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(data.keyInfo.expiresAt).toLocaleString('ru-RU')}`);
    } else {
      console.log(`‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: –ù–ò–ö–û–ì–î–ê`);
    }

    console.log('\nüîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:');
    console.log(`   - –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${data.keyInfo.permissions['samples.create'] ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${data.keyInfo.permissions['samples.update'] ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`   - –£–¥–∞–ª–µ–Ω–∏–µ: ${data.keyInfo.permissions['samples.delete'] ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!');
    console.log('‚ö†Ô∏è  –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n');

    console.log('üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á:');
    console.log(`   1. –í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: http://localhost:3000/samples`);
    console.log(`   2. –í API –∑–∞–ø—Ä–æ—Å–∞—Ö: –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "X-API-Key: ${data.apiKey}"\n`);

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞:', error.message);
    process.exit(1);
  }
}

// Check if node-fetch is available
(async () => {
  try {
    await import('node-fetch');
  } catch (e) {
    console.log('‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ node-fetch...');
    const { execSync } = require('child_process');
    execSync('npm install node-fetch@2', { stdio: 'inherit' });
  }

  await createApiKey();
})();
