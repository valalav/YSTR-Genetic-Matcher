#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/list-api-keys.js
 *   node scripts/list-api-keys.js --all  (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
 */

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:9004';
const MASTER_KEY = process.env.MASTER_API_KEY || 'master_dna_2025_ultra_secure_key_change_this_in_production';

const includeInactive = process.argv.includes('--all');

(async () => {
  console.log('üîë –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π\n');

  try {
    const fetch = (await import('node-fetch')).default;

    const url = `${BACKEND_URL}/api/admin/keys${includeInactive ? '?includeInactive=true' : ''}`;
    const response = await fetch(url, {
      headers: {
        'X-API-Key': MASTER_KEY
      }
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || error.error || 'Failed to fetch keys');
    }

    const data = await response.json();

    if (data.keys.length === 0) {
      console.log('üì≠ –ù–µ—Ç API –∫–ª—é—á–µ–π');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: ${data.total}\n`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    data.keys.forEach((key, index) => {
      console.log(`\n#${index + 1} ${key.is_active ? 'üü¢' : 'üî¥'} ${key.name}`);
      console.log(`   ID: ${key.id}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${key.description || '(–Ω–µ—Ç)'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(key.created_at).toLocaleString('ru-RU')}`);

      if (key.expires_at) {
        const expired = new Date(key.expires_at) < new Date();
        console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(key.expires_at).toLocaleString('ru-RU')} ${expired ? '‚ö†Ô∏è –ò–°–¢–ï–ö' : ''}`);
      } else {
        console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: –ù–ò–ö–û–ì–î–ê`);
      }

      if (key.last_used_at) {
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${new Date(key.last_used_at).toLocaleString('ru-RU')}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${key.usage_count}`);
      } else {
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ù–ò–ö–û–ì–î–ê`);
      }

      const perms = key.permissions || {};
      console.log(`   –ü—Ä–∞–≤–∞:`);
      console.log(`      - –°–æ–∑–¥–∞–Ω–∏–µ: ${perms['samples.create'] ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${perms['samples.update'] ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - –£–¥–∞–ª–µ–Ω–∏–µ: ${perms['samples.delete'] ? '‚úÖ' : '‚ùå'}`);
    });

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
})();
