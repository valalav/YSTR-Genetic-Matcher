version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ystr-postgres
    environment:
      POSTGRES_DB: ystr_matcher
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/optimizations.sql:/docker-entrypoint-initdb.d/02-optimizations.sql
    ports:
      - "5432:5432"
    command: postgres -c 'shared_buffers=2GB' -c 'effective_cache_size=6GB' -c 'work_mem=256MB' -c 'maintenance_work_mem=1GB' -c 'max_worker_processes=8' -c 'max_parallel_workers=8' -c 'max_parallel_workers_per_gather=4'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ystr_matcher"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ystr-redis
    command: redis-server --maxmemory 4gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ystr-backend
    environment:
      NODE_ENV: production
      PORT: 9004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ystr_matcher
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      DB_MAX_CONNECTIONS: 20
      REDIS_URL: redis://redis:6379
      CUDA_PREDICTOR_URL: http://cuda-predictor:8080
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      MAX_PROFILES_PER_BATCH: 50000
      WORKER_CONCURRENCY: 4
    ports:
      - "9004:9004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CUDA ML Predictor Service
  cuda-predictor:
    build:
      context: ./cuda-predictor
      dockerfile: Dockerfile
    container_name: ystr-cuda-predictor
    environment:
      PORT: 8080
      REDIS_URL: redis://redis:6379
      MODEL_PATH: /app/models
      CUDA_VISIBLE_DEVICES: 0
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./cuda-predictor/models:/app/models:ro
      - ./cuda-predictor/logs:/app/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend-v2
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:9004/api}
        NEXT_PUBLIC_CUDA_SERVICE_URL: ${NEXT_PUBLIC_CUDA_SERVICE_URL:-http://localhost:8080}
    container_name: ystr-frontend
    environment:
      NODE_ENV: production
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ystr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - cuda-predictor
    restart: unless-stopped

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ystr-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ystr-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation: ELK Stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ystr-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    profiles: ["logging"]

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: ystr-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles: ["logging"]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ystr-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles: ["logging"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    name: ystr-network