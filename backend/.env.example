# ==============================================================================
# YSTR Matcher Backend - Environment Configuration
# ==============================================================================
# Copy this file to .env and update values for your environment
# DO NOT commit .env to git - it contains sensitive credentials!
# ==============================================================================

# ==============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# ==============================================================================

# PostgreSQL connection settings
# For local container: localhost
# For external database: use IP or hostname
DB_HOST=localhost
DB_PORT=5432
DB_NAME=ystr_matcher
DB_USER=postgres
DB_PASSWORD=your_secure_password_here

# Connection pool settings
DB_MAX_CONNECTIONS=20
DB_IDLE_TIMEOUT=30000

# ==============================================================================
# REDIS CONFIGURATION (Caching & Job Queue)
# ==============================================================================

# Redis connection URL
# For local container: redis://localhost:6379
# For external Redis: redis://hostname:6379
REDIS_URL=redis://localhost:6379

# Redis password (if authentication enabled)
REDIS_PASSWORD=

# ==============================================================================
# SERVER CONFIGURATION
# ==============================================================================

# Backend API port (default: 9004)
PORT=9004

# Environment: development | production | test
NODE_ENV=production

# Allowed CORS origins (comma-separated)
# IMPORTANT: Add your production domain here!
# Example: https://pystr.valalav.ru,https://bpystr.valalav.ru
ALLOWED_ORIGINS=https://yourdomain.com

# ==============================================================================
# API KEY AUTHENTICATION
# ==============================================================================

# Master API Key for full admin access
# CRITICAL: Generate a secure random key and store it safely!
# Generate with: node -e "console.log('master_' + require('crypto').randomBytes(32).toString('hex'))"
MASTER_API_KEY=master_YOUR_64_CHARACTER_HEX_KEY_HERE

# ==============================================================================
# SECURITY
# ==============================================================================

# JWT secret for token signing (if using JWT authentication)
JWT_SECRET=your-super-secret-jwt-key-change-this

# Rate limiting settings
RATE_LIMIT_WINDOW_MS=900000          # 15 minutes in milliseconds
RATE_LIMIT_MAX_REQUESTS=100          # Max requests per window

# Trust proxy setting (for rate limiting behind reverse proxy)
# Use 'true' if behind nginx/HAProxy, or specify number of proxies to trust
TRUST_PROXY=true

# ==============================================================================
# FILE UPLOAD LIMITS
# ==============================================================================

# Maximum CSV file size for profile uploads
MAX_FILE_SIZE=100MB

# Maximum number of profiles per batch import
MAX_PROFILES_PER_BATCH=10000

# ==============================================================================
# PERFORMANCE TUNING
# ==============================================================================

# Worker concurrency for Bull queue
WORKER_CONCURRENCY=4

# Cache TTL in seconds (default: 1 hour)
CACHE_TTL=3600

# Batch size for bulk operations
BATCH_SIZE=1000

# ==============================================================================
# LOGGING & MONITORING
# ==============================================================================

# Log level: error | warn | info | debug
LOG_LEVEL=info

# Enable query logging (useful for debugging slow queries)
LOG_QUERIES=false

# ==============================================================================
# DEPLOYMENT NOTES
# ==============================================================================
#
# For new hosting setup:
#
# 1. Generate Master API Key:
#    node -e "console.log('master_' + require('crypto').randomBytes(32).toString('hex'))"
#
# 2. Update database credentials (DB_HOST, DB_PASSWORD)
#
# 3. Update ALLOWED_ORIGINS with your actual domain(s)
#
# 4. Set NODE_ENV=production for production environment
#
# 5. Consider changing REDIS_URL if Redis is on different host
#
# 6. Save Master API Key in secure password manager!
#
# ==============================================================================
